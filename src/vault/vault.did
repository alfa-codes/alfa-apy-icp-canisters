type AcceptInvestmentArgs = record {
  strategy_id : nat16;
  ledger : principal;
  amount : nat;
};

type Conf = record { controllers : opt vec principal };

type DepositResponse = record {
  request_id : nat64;
  tx_id : nat64;
  shares : nat;
  amount : nat;
};

type ExchangeId = variant { Sonic; KongSwap; ICPSwap };

type Icrc28TrustedOriginsResponse = record { trusted_origins : vec text };

type Pool = record {
  id : text;
  provider : ExchangeId;
  token0 : principal;
  token1 : principal;
};

type StrategyResponse = record {
  id : nat16;
  name : text;
  description : text;
  total_shares : nat;
  initial_deposit : vec record { principal; nat };
  user_shares : vec record { principal; nat };
  current_pool : opt Pool;
  total_balance : nat;
  pools : vec Pool;
};

type SupportedStandard = record { url : text; name : text };

type SystemEvent = record {
  id : nat64;
  timestamp : nat64;
  details : SystemEventDetails;
  event_type : SystemEventType;
};

type SystemEventDetails = variant {
  Swap;
  Rebalance : record { old_pool : text; new_pool : text };
};

type SystemEventType = variant { Swap; Rebalance };

type UserEvent = record {
  id : nat64;
  user : principal;
  timestamp : nat64;
  details : UserEventDetails;
  event_type : UserEventType;
};

type UserEventDetails = variant {
  AddLiquidity : record { token : principal; amount : nat };
  RemoveLiquidity : record { token : principal; amount : nat };
};

type UserEventType = variant { AddLiquidity; RemoveLiquidity };

type UserStrategyResponse = record {
  strategy_current_pool : Pool;
  total_shares : nat;
  strategy_id : nat16;
  initial_deposit : nat;
  user_shares : nat;
  strategy_name : text;
  users_count : nat32;
};

type WithdrawArgs = record {
  strategy_id : nat16;
  ledger : principal;
  amount : nat;
};

type WithdrawResponse = record { current_shares : nat; amount : nat };

service : (opt Conf) -> {
  accept_investment : (AcceptInvestmentArgs) -> (DepositResponse);
  get_config : () -> (Conf) query;
  get_strategies : () -> (vec StrategyResponse) query;
  get_system_events : (nat64, nat64) -> (vec SystemEvent);
  get_user_events : (principal, nat64, nat64) -> (vec UserEvent);
  icpswap_withdraw : (principal, nat, nat) -> (nat);
  icrc10_supported_standards : () -> (vec SupportedStandard) query;
  icrc28_trusted_origins : () -> (Icrc28TrustedOriginsResponse);
  reset_strategy : (nat16) -> ();
  user_strategies : (principal) -> (vec UserStrategyResponse);
  withdraw : (WithdrawArgs) -> (WithdrawResponse);
}