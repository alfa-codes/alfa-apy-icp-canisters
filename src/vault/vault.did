type AddLiquidityToPoolFailed = record {
  error : InternalError;
  amount0 : opt nat;
  pool_id : text;
};

type AddLiquidityToPoolStarted = record {
  amount0 : opt nat;
  amount1 : opt nat;
  pool_id : text;
};

type AddLiquidityToPoolCompleted = record {
  amount0 : opt nat;
  amount1 : opt nat;
  pool_id : text;
};

type Conf = record {
  controllers : opt vec principal;
};

type Event = variant {
  StrategyWithdrawCompleted : StrategyWithdrawCompleted;
  StrategyWithdrawStarted : StrategyWithdrawStarted;
  AddLiquidityToPoolFailed : AddLiquidityToPoolFailed;
  AddLiquidityToPoolCompleted : AddLiquidityToPoolCompleted;
  WithdrawLiquidityFromPoolStarted : WithdrawLiquidityFromPoolStarted;
  SwapTokenFailed : SwapTokenFailed;
  AddLiquidityToPoolStarted : AddLiquidityToPoolStarted;
  StrategyDepositStarted : StrategyDepositStarted;
  StrategyDepositCompleted : StrategyDepositCompleted;
  StrategyRebalanceFailed : StrategyRebalanceFailed;
  SwapTokenCompleted : SwapTokenCompleted;
  WithdrawLiquidityFromPoolCompleted : WithdrawLiquidityFromPoolCompleted;
  StrategyRebalanceStarted : StrategyRebalanceStarted;
  SwapTokenStarted : SwapTokenStarted;
  StrategyWithdrawFailed : StrategyWithdrawFailed;
  WithdrawLiquidityFromPoolFailed : WithdrawLiquidityFromPoolFailed;
  StrategyRebalanceCompleted : StrategyRebalanceCompleted;
  StrategyDepositFailed : StrategyDepositFailed;
};

type EventRecord = record {
  id : nat64;
  user : opt principal;
  event : Event;
  timestamp : nat64;
  correlation_id : text;
};

type EventRecordsPaginationResponse = record {
  page_size : nat64;
  total : nat64;
  page : nat64;
  items : vec EventRecord;
};

type ExchangeId = variant { Sonic; KongSwap; ICPSwap };

type GetEventRecordsResult = variant {
  Ok : EventRecordsPaginationResponse;
  Err : ResponseError;
};

type Icrc28TrustedOriginsResponse = record {
  trusted_origins : vec text;
};

type InternalError = record {
  context : text;
  code : nat32;
  kind : InternalErrorKind;
  extra : opt vec record { text; text };
  message : text;
};

type InternalErrorKind = variant {
  AccessDenied;
  NotFound;
  Timeout;
  Unknown;
  BusinessLogic;
  ExternalService;
  Validation;
};


type ListItemsPaginationRequest = record {
  page_size : nat64;
  page : nat64;
  sort_order : SortOrder;
  search : opt text;
};

type Pool = record {
  id : text;
  provider : ExchangeId;
  token0 : principal;
  token1 : principal;
};

type ResponseError = record {
  code : nat32;
  kind : InternalErrorKind;
  message : text;
  details : opt vec record { text; text };
};

type SortOrder = variant { Asc; Desc };

type StrategyDepositArgs = record {
  strategy_id : nat16;
  ledger : principal;
  amount : nat;
};

type StrategyDepositFailed = record {
  error : InternalError;
  strategy_id : text;
  amount0 : opt nat;
  pool_id : opt text;
};

type StrategyDepositResponse = record {
  tx_id : nat64;
  shares : nat;
  amount : nat;
  position_id : nat64;
};

type StrategyDepositResult = variant {
  Ok : StrategyDepositResponse;
  Err : ResponseError;
};

type StrategyDepositStarted = record {
  strategy_id : text;
  amount0 : opt nat;
  pool_id : opt text;
};

type StrategyDepositCompleted = record {
  strategy_id : text;
  amount0 : opt nat;
  pool_id : opt text;
};

type StrategyLiquidityResult = variant {
  Ok : nat;
  Err : ResponseError;
};

type StrategyRebalanceCompleted = record {
  new_pool_id : opt text;
  strategy_id : text;
  previous_pool_id : opt text;
};

type StrategyRebalanceFailed = record {
  new_pool_id : opt text;
  error : InternalError;
  strategy_id : text;
  previous_pool_id : opt text;
};

type StrategyRebalanceStarted = record {
  strategy_id : text;
  previous_pool_id : opt text;
};

type StrategyResponse = record {
  id : nat16;
  current_liquidity_updated_at : opt nat64;
  name : text;
  description : text;
  total_shares : nat;
  initial_deposit : vec record { principal; nat };
  user_shares : vec record { principal; nat };
  current_liquidity : opt nat;
  current_pool : opt Pool;
  total_balance : nat;
  pools : vec Pool;
  users_count : nat32;
};

type StrategyWithdrawArgs = record {
  strategy_id : nat16;
  ledger : principal;
  percentage : nat;
};

type StrategyWithdrawCompleted = record {
  shares : opt nat;
  strategy_id : text;
  amount0 : opt nat;
  pool_id : opt text;
};

type StrategyWithdrawFailed = record {
  shares : opt nat;
  error : InternalError;
  strategy_id : text;
  pool_id : opt text;
};

type StrategyWithdrawResponse = record {
  current_shares : nat;
  amount : nat;
};

type StrategyWithdrawResult = variant {
  Ok : StrategyWithdrawResponse;
  Err : ResponseError;
};

type StrategyWithdrawStarted = record {
  shares : opt nat;
  strategy_id : text;
  pool_id : opt text;
};

type SupportedStandard = record {
  url : text;
  name : text;
};

type SwapTokenCompleted = record {
  token_in : principal;
  amount_out : opt nat;
  amount_in : opt nat;
  token_out : principal;
  pool_id : text;
};

type SwapTokenFailed = record {
  token_in : principal;
  error : InternalError;
  amount_in : opt nat;
  token_out : principal;
  pool_id : text;
};

type SwapTokenStarted = record {
  token_in : principal;
  amount_in : opt nat;
  token_out : principal;
  pool_id : text;
};

type UserStrategyResponse = record {
  strategy_current_pool : Pool;
  total_shares : nat;
  strategy_id : nat16;
  initial_deposit : nat;
  user_shares : nat;
  strategy_name : text;
  users_count : nat32;
};

type WithdrawLiquidityFromPoolCompleted = record {
  shares : nat;
  total_shares : nat;
  amount_token0 : nat;
  amount_token1 : nat;
  pool_id : text;
};

type WithdrawLiquidityFromPoolFailed = record {
  shares : nat;
  total_shares : nat;
  error : InternalError;
  pool_id : text;
};

type WithdrawLiquidityFromPoolStarted = record {
  shares : nat;
  total_shares : nat;
  pool_id : text;
};

service : (opt Conf) -> {
  deposit : (StrategyDepositArgs) -> (StrategyDepositResult);
  get_config : () -> (Conf) query;
  get_event_records : (ListItemsPaginationRequest) -> (GetEventRecordsResult);
  get_strategies : () -> (vec StrategyResponse) query;
  icrc10_supported_standards : () -> (vec SupportedStandard) query;
  icrc28_trusted_origins : () -> (Icrc28TrustedOriginsResponse);
  strategy_liquidity : (nat16) -> (StrategyLiquidityResult);
  test_icpswap_withdraw : (principal, nat, nat) -> (nat);
  test_reset_strategy : (nat16) -> ();
  user_strategies : (principal) -> (vec UserStrategyResponse);
  withdraw : (StrategyWithdrawArgs) -> (StrategyWithdrawResult);
  test_update_strategy_stats : () -> ();
};
