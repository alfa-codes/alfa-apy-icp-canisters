type Conf = record { controllers : opt vec principal };

type EventLog = record {
  id : nat64;
  user : opt principal;
  error : opt InternalError;
  timestamp : nat64;
  correlation_id : text;
  event_type : EventLogType;
  params : EventLogParams;
};

type EventLogParams = variant {
  ExternalCallCompleted : record {
    "service" : text;
    result : vec record { text; text };
    method : text;
    params : vec record { text; text };
  };
  StrategyWithdrawCompleted : record {
    shares : opt nat;
    strategy_id : text;
    amount0 : opt nat;
    pool_id : opt text;
  };
  StrategyWithdrawStarted : record {
    shares : opt nat;
    strategy_id : text;
    pool_id : opt text;
  };
  AddLiquidityToPoolFailed : record {
    amount0 : opt nat;
    amount1 : opt nat;
    pool_id : text;
  };
  AddLiquidityToPoolCompleted : record {
    amount0 : opt nat;
    amount1 : opt nat;
    pool_id : text;
  };
  WithdrawLiquidityFromPoolStarted : record {
    amount0 : opt nat;
    amount1 : opt nat;
    pool_id : text;
  };
  ExternalCallFailed : record {
    "service" : text;
    method : text;
    error : text;
    params : vec record { text; text };
  };
  SwapTokenFailed : record {
    token_in : principal;
    amount_in : opt nat;
    token_out : principal;
    pool_id : text;
  };
  AddLiquidityToPoolStarted : record {
    amount0 : opt nat;
    amount1 : opt nat;
    pool_id : text;
  };
  StrategyDepositStarted : record {
    strategy_id : text;
    amount0 : opt nat;
    pool_id : opt text;
  };
  StrategyDepositCompleted : record {
    strategy_id : text;
    amount0 : opt nat;
    pool_id : opt text;
  };
  StrategyRebalanceFailed : record {
    new_pool_id : opt text;
    strategy_id : text;
    previous_pool_id : opt text;
  };
  SwapTokenCompleted : record {
    token_in : principal;
    amount_out : opt nat;
    amount_in : opt nat;
    token_out : principal;
  };
  WithdrawLiquidityFromPoolCompleted : record {
    amount0 : opt nat;
    amount1 : opt nat;
    pool_id : text;
  };
  StrategyRebalanceStarted : record {
    strategy_id : text;
    previous_pool_id : opt text;
  };
  SwapTokenStarted : record {
    token_in : principal;
    amount_in : opt nat;
    token_out : principal;
    pool_id : text;
  };
  ExternalCallStarted : record {
    "service" : text;
    method : text;
    params : vec record { text; text };
  };
  StrategyWithdrawFailed : record {
    shares : opt nat;
    strategy_id : text;
    pool_id : opt text;
  };
  WithdrawLiquidityFromPoolFailed : record {
    amount0 : opt nat;
    amount1 : opt nat;
    pool_id : text;
  };
  StrategyRebalanceCompleted : record {
    new_pool_id : opt text;
    strategy_id : text;
    previous_pool_id : opt text;
  };
  StrategyDepositFailed : record {
    strategy_id : text;
    amount0 : opt nat;
    pool_id : opt text;
  };
};

type EventLogType = variant {
  ExternalCallCompleted;
  StrategyWithdrawCompleted;
  StrategyWithdrawStarted;
  AddLiquidityToPoolFailed;
  AddLiquidityToPoolCompleted;
  WithdrawLiquidityFromPoolStarted;
  ExternalCallFailed;
  SwapTokenFailed;
  AddLiquidityToPoolStarted;
  StrategyDepositStarted;
  StrategyDepositCompleted;
  StrategyRebalanceFailed;
  SwapTokenCompleted;
  WithdrawLiquidityFromPoolCompleted;
  StrategyRebalanceStarted;
  SwapTokenStarted;
  ExternalCallStarted;
  StrategyWithdrawFailed;
  WithdrawLiquidityFromPoolFailed;
  StrategyRebalanceCompleted;
  StrategyDepositFailed;
};

type ExchangeId = variant { Sonic; KongSwap; ICPSwap };

type Icrc28TrustedOriginsResponse = record { trusted_origins : vec text };

type InternalError = record {
  context : text;
  code : nat32;
  kind : InternalErrorKind;
  extra : opt vec record { text; text };
  message : text;
};

type InternalErrorKind = variant {
  AccessDenied;
  NotFound;
  Timeout;
  Unknown;
  BusinessLogic;
  ExternalService;
  Validation;
};

type Pool = record {
  id : text;
  provider : ExchangeId;
  token0 : principal;
  token1 : principal;
};

type ResponseError = record {
  code : nat32;
  kind : ResponseErrorKind;
  message : text;
  details : opt vec record { text; text };
};

type ResponseErrorKind = variant {
  AccessDenied;
  NotFound;
  Timeout;
  Unknown;
  BusinessLogic;
  ExternalService;
  Validation;
};

type StrategyDepositArgs = record {
  strategy_id : nat16;
  ledger : principal;
  amount : nat;
};

type StrategyDepositResponse = record {
  position_id : nat64;
  tx_id : nat64;
  shares : nat;
  amount : nat;
};

type StrategyDepositResult = variant {
  Ok : StrategyDepositResponse;
  Err : ResponseError;
};

type StrategyLiquidityResult = variant { Ok : nat; Err : ResponseError };

type StrategyResponse = record {
  id : nat16;
  name : text;
  description : text;
  total_shares : nat;
  initial_deposit : vec record { principal; nat };
  user_shares : vec record { principal; nat };
  current_pool : opt Pool;
  total_balance : nat;
  pools : vec Pool;
};

type StrategyWithdrawResponse = record { current_shares : nat; amount : nat };

type StrategyWithdrawResult = variant {
  Ok : StrategyWithdrawResponse;
  Err : ResponseError;
};

type SupportedStandard = record { url : text; name : text };

type UserStrategyResponse = record {
  strategy_current_pool : Pool;
  total_shares : nat;
  strategy_id : nat16;
  initial_deposit : nat;
  user_shares : nat;
  strategy_name : text;
  users_count : nat32;
};

service : (opt Conf) -> {
  deposit : (StrategyDepositArgs) -> (StrategyDepositResult);
  get_config : () -> (Conf) query;
  get_event_logs : (nat64, nat64) -> (vec EventLog);
  get_strategies : () -> (vec StrategyResponse) query;
  icrc10_supported_standards : () -> (vec SupportedStandard) query;
  icrc28_trusted_origins : () -> (Icrc28TrustedOriginsResponse);
  strategy_liquidity : (nat16) -> (StrategyLiquidityResult);
  test_icpswap_withdraw : (principal, nat, nat) -> (nat);
  test_reset_strategy : (nat16) -> ();
  user_strategies : (principal) -> (vec UserStrategyResponse);
  withdraw : (StrategyDepositArgs) -> (StrategyWithdrawResult);
}