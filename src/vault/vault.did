type Conf = record { controllers : opt vec principal };

type DepositResponse = record {
    request_id : nat64;
    tx_id : nat64;
    shares : nat;
    amount : nat;
};

type Icrc28TrustedOriginsResponse = record {
    trusted_origins : vec text
};

type LPReply = record {
    ts : nat64;
    usd_balance : float64;
    balance : float64;
    name : text;
    amount_0 : float64;
    amount_1 : float64;
    address_0 : text;
    address_1 : text;
    symbol_0 : text;
    symbol_1 : text;
    usd_amount_0 : float64;
    usd_amount_1 : float64;
    chain_0 : text;
    chain_1 : text;
    symbol : text;
};

type PoolReply = record {
    tvl : nat;
    lp_token_symbol : text;
    name : text;
    lp_fee_0 : nat;
    lp_fee_1 : nat;
    balance_0 : nat;
    balance_1 : nat;
    rolling_24h_volume : nat;
    rolling_24h_apy : float64;
    address_0 : text;
    address_1 : text;
    rolling_24h_num_swaps : nat;
    symbol_0 : text;
    symbol_1 : text;
    pool_id : nat32;
    price : float64;
    chain_0 : text;
    chain_1 : text;
    is_removed : bool;
    symbol : text;
    rolling_24h_lp_fee : nat;
    lp_fee_bps : nat8;
};

type PoolsReply = record {
    total_24h_lp_fee : nat;
    total_tvl : nat;
    total_24h_volume : nat;
    pools : vec PoolReply;
    total_24h_num_swaps : nat;
};

type StrategyResponse = record {
    id : nat16;
    name : text;
    description : text;
    total_shares : nat;
    initial_deposit : vec record { principal; nat };
    user_shares : vec record { principal; nat };
    current_pool : opt PoolReply;
    pools : vec text;
};

type SupportedStandard = record {
    url : text;
    name : text
};

type UserBalancesReply = variant {
    LP : LPReply
};

type UserStrategyResponse = record {
    strategy_current_pool : text;
    total_shares : nat;
    strategy_id : nat16;
    initial_deposit : nat;
    user_shares : nat;
    strategy_name : text;
};

type WithdrawArgs = record {
    strategy_id : nat16;
    ledger : principal;
    amount : nat;
};

type WithdrawResponse = record {
    current_shares : nat;
    amount : nat;
};

type TokenInfo = record {
    symbol : text;
    ledger : principal;
};

type AddLiquidityResponse = record {
    token_0_amount : nat;
    token_1_amount : nat;
    request_id : nat64;
};

type WithdrawFromPoolResponse = record {
    token_0_amount : nat;
    token_1_amount : nat;
};

service : (opt Conf) -> {
    accept_investment : (WithdrawArgs) -> (DepositResponse);
    get_config : () -> (Conf) query;
    get_strategies : () -> (vec StrategyResponse) query;
    user_balance_all : () -> (vec UserBalancesReply);
    user_strategies : (principal) -> (vec UserStrategyResponse);
    withdraw : (WithdrawArgs) -> (WithdrawResponse);
    icrc10_supported_standards : () -> (vec SupportedStandard) query;
    icrc28_trusted_origins : () -> (Icrc28TrustedOriginsResponse);
    get_kongswap_quote : (input_token : TokenInfo, output_token : TokenInfo, amount : nat) -> (nat);
    swap_kongswap : (input_token : TokenInfo, output_token : TokenInfo, amount : nat) -> (nat);
    kong_add_liquidity : (amount: nat, token0 : TokenInfo, token1 : TokenInfo) -> (AddLiquidityResponse);
    kong_withdraw_from_pool : (total_shares: nat, shares: nat, token0: TokenInfo, token1: TokenInfo) -> (WithdrawFromPoolResponse);
    get_icpswap_quote : (input_token : TokenInfo, output_token : TokenInfo, amount : nat) -> (nat);
    swap_icpswap : (input_token : TokenInfo, output_token : TokenInfo, amount : nat) -> (nat);
    icpswap_withdraw : (token_out : TokenInfo, amount : nat, token_fee : nat) -> (variant { Ok : nat; Err : text });
    icpswap_add_liquidity : (amount: nat, token_in : TokenInfo, token_out : TokenInfo) -> (AddLiquidityResponse);
    icpswap_withdraw_from_pool : (total_shares: nat, shares: nat, token_in: TokenInfo, token_out: TokenInfo) -> (WithdrawFromPoolResponse);
}