type AddLiquidityResponse = record {
  position_id : nat64;
  token_0_amount : nat;
  token_1_amount : nat;
};

type AddLiquidityResult = variant {
  Ok : AddLiquidityResponse;
  Err : ResponseError;
};

type AddPoolResult = variant { Ok : text; Err : ResponseError };

type ApyValue = record { tokens_apy : float64; usd_apy : float64 };

type DeletePoolResult = variant { Ok; Err : ResponseError };

type ExchangeId = variant { Sonic; KongSwap; ICPSwap };

type GetPoolByIdResult = variant { Ok : Pool; Err : ResponseError };

type GetPoolsResult = variant { Ok : vec Pool; Err : ResponseError };

type InternalError = record {
  context : text;
  code : nat32;
  kind : InternalErrorKind;
  extra : opt vec record { text; text };
  message : text;
};

type InternalErrorKind = variant {
  AccessDenied;
  NotFound;
  Timeout;
  Unknown;
  BusinessLogic;
  ExternalService;
  Validation;
};

type Pool = record {
  id : text;
  provider : ExchangeId;
  token0 : principal;
  token1 : principal;
  position_id : opt nat64;
};

type PoolData = record { tvl : nat };

type PoolMetrics = record { apy : ApyValue; tvl : nat };

type PoolSnapshot = record {
  id : text;
  pool_data : opt PoolData;
  timestamp : nat64;
  pool_id : text;
  position_data : opt PositionData;
};

type PoolSnapshotArgs = record {
  pool_data : opt PoolData;
  timestamp : nat64;
  pool_id : text;
  position_data : opt PositionData;
};

type PositionData = record {
  id : nat64;
  usd_amount0 : nat;
  usd_amount1 : nat;
  amount0 : nat;
  amount1 : nat;
};

type ResponseError = record {
  source : opt InternalError;
  code : nat32;
  kind : InternalErrorKind;
  message : text;
  details : opt vec record { text; text };
};

type TestCreatePoolSnapshotResult = variant {
  Ok : PoolSnapshot;
  Err : ResponseError;
};

type WithdrawLiquidityResponse = record {
  token_0_amount : nat;
  token_1_amount : nat;
};

type WithdrawLiquidityResult = variant {
  Ok : WithdrawLiquidityResponse;
  Err : ResponseError;
};

service : () -> {
  add_liquidity_to_pool : (principal, text, nat) -> (AddLiquidityResult);
  add_pool : (principal, principal, ExchangeId) -> (AddPoolResult);
  delete_pool : (text) -> (DeletePoolResult);
  get_pool_by_id : (text) -> (GetPoolByIdResult);
  get_pool_metrics : (vec text) -> (vec record { text; PoolMetrics });
  get_pools : () -> (GetPoolsResult);
  get_pools_snapshots : (vec text) -> (vec record { text; vec PoolSnapshot });
  set_operator : (principal) -> ();
  test_add_pool_snapshot : (PoolSnapshotArgs) -> ();
  test_create_pool_snapshot : (text) -> (TestCreatePoolSnapshotResult);
  test_delete_all_pools_and_snapshots : () -> ();
  test_delete_pool_snapshot : (text, text) -> ();
  test_delete_pool_snapshots : (text) -> ();
  test_update_pool_ids : () -> ();
  withdraw_liquidity_from_pool : (text) -> (WithdrawLiquidityResult);
}