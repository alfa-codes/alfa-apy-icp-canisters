type CreateTestSnapshotsRequest = record {
  from_timestamp : nat64;
  min_apy : float64;
  strategy_id : nat16;
  to_timestamp : nat64;
  max_apy : float64;
  snapshot_interval_secs : nat64;
};

type CreateTestSnapshotsResponse = record {
  from_timestamp : nat64;
  snapshots_created : nat64;
  min_apy : float64;
  actual_apy_range : record { float64; float64 };
  strategy_id : nat16;
  to_timestamp : nat64;
  max_apy : float64;
};

type CreateTestSnapshotsResult = variant {
  Ok : CreateTestSnapshotsResponse;
  Err : ResponseError;
};

type Environment = variant { Dev; Production; Test; Staging };

type ExchangeId = variant { Sonic; KongSwap; ICPSwap };

type GetStrategiesHistoryRequest = record {
  from_timestamp : opt nat64;
  to_timestamp : opt nat64;
  strategy_ids : opt vec nat16;
};

type GetStrategiesHistoryResult = variant {
  Ok : vec StrategyHistory;
  Err : ResponseError;
};

type InitializeStrategyStatesAndCreateSnapshotsResponse = record {
  errors : vec InternalError;
  success_count : nat64;
};

type InitializeStrategyStatesAndCreateSnapshotsResult = variant {
  Ok : InitializeStrategyStatesAndCreateSnapshotsResponse;
  Err : ResponseError;
};

type InitializeStrategyStatesResponse = record {
  skipped_already_initialized_strategy_states : vec nat16;
  failed_strategy_states : vec record { nat16; InternalError };
  initialized_strategy_states : vec nat16;
};

type InitializeStrategyStatesResult = variant {
  Ok : InitializeStrategyStatesResponse;
  Err : ResponseError;
};

type InternalError = record {
  context : text;
  code : nat64;
  kind : ResponseErrorKind;
  extra : opt vec record { text; text };
  message : text;
};

type Pool = record {
  id : text;
  provider : ExchangeId;
  token0 : principal;
  token1 : principal;
};

type ResponseError = record {
  code : nat64;
  kind : ResponseErrorKind;
  message : text;
  details : opt vec record { text; text };
};

type ResponseErrorKind = variant {
  AccessDenied;
  Infrastructure;
  NotFound;
  Timeout;
  Unknown;
  BusinessLogic;
  ExternalService;
  Validation;
};

type RuntimeConfig = record { environment : Environment };

type SaveStrategySnapshotResult = variant { Ok; Err : ResponseError };

type StrategyHistory = record {
  snapshots : vec StrategySnapshot;
  strategy_id : nat16;
};

type StrategySnapshot = record {
  id : text;
  apy : float64;
  test_liquidity_amount : opt nat;
  current_liquidity_updated_at : opt nat64;
  total_shares : nat;
  strategy_id : nat16;
  current_liquidity : opt nat;
  timestamp : nat64;
  current_pool : opt Pool;
  total_balance : nat;
  users_count : nat32;
  position_id : opt nat64;
};

type StrategyState = record {
  last_error : opt text;
  initialize_attempts : nat32;
  snapshot_cadence_secs : opt nat64;
  initialized_at : opt nat64;
  test_liquidity_data : opt TestLiquidityData;
  last_snapshot_at : opt nat64;
};

type TestLiquidityData = record {
  tx_id : nat64;
  shares : nat;
  amount : nat;
  position_id : nat64;
};

service : (RuntimeConfig) -> {
  get_all_strategy_states : () -> (vec record { nat16; StrategyState }) query;
  get_runtime_config : () -> (RuntimeConfig) query;
  get_strategies_history : (GetStrategiesHistoryRequest) -> (
      GetStrategiesHistoryResult,
    ) query;
  get_strategy_snapshots_count : (nat16) -> (nat64) query;
  get_strategy_state : (nat16) -> (opt StrategyState) query;
  test_create_snapshots : (CreateTestSnapshotsRequest) -> (
      CreateTestSnapshotsResult,
    );
  test_delete_all_snapshots : () -> ();
  test_delete_strategy_state : (nat16) -> ();
  test_delete_all_snapshots_for_strategy : (nat16) -> ();
  test_initialize_strategy_states : (opt vec nat16) -> (
      InitializeStrategyStatesResult,
    );
  test_initialize_strategy_states_and_create_snapshots : (opt vec nat16) -> (
      InitializeStrategyStatesAndCreateSnapshotsResult,
    );
  test_save_strategy_snapshot : (StrategySnapshot) -> (
      SaveStrategySnapshotResult,
    );
  test_remove_zero_liquidity_snapshots : () -> ();
};
